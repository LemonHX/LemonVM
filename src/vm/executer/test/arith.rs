#[async_std::test]
async fn TestNeg() {
    let constant_pool = [
        0x01,
        0x04,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x4a,0xd8,0x12,0x4d,0xfb,0x21,0x09,0x40
    ];
    let bytes = [   
        0x03, 0x00, 0x00, 0x00, 
        0x6a, 0x00, 0x6d,0x00,0x70,0x00,
        0x00,0x00,0x00,0x00,
        0x00,
        0x00,
        0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x01,0x00,
        // start
        // label : 0
        0x00,0x00,
        0x04,0x00,0x00,0x00,
        0xFF,0x01,0x05,0x00,0x04,0x01,0x00,0x00,0x00,
        0x00,0x68,0x00,0x00,0x00,
        0x00,0x4d,0x00,0x00,0x00,
        // end
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
    ];
    super::super::super::super::reader::Reader::read_constant_pool(constant_pool.as_ptr(), constant_pool.len());
    //println!("{:?}",constant_and_pool::CONSTANT_POOL.read().unwrap());
    let mut reader = super::super::super::super::reader::Reader::new(bytes.as_ptr());
    let func = reader.read_func();
    println!("{}",func);
    let stack= super::super::super::super::vm::executer::stack::Stack::new(Box::new(func));
    use super::super::super::super::vm::*;
    let h = new_thread(stack);
    let (s,r) = get_sender_receiver(h);
    println!("===== testing Neg =====");
    let (v,_) = get_join_handle(h).await;
    assert_eq!(v[0],super::super::Value(super::super::PrimeValue::Num(-3.1415926),super::super::super::super::bin_format::Type::Mono(0x04)))
}
#[async_std::test]
async fn TestAdd() {
    let constant_pool = [
        0x01,
        0x03,
        0x02,0x00,0x00,0x00,
        0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
        0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00
    ];
    let bytes = [
        0x03, 0x00, 0x00, 0x00, 
        0x6a, 0x00, 0x6d,0x00,0x70,0x00,
        0x00,0x00,0x00,0x00,
        0x00,
        0x00,
        0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        
        0x01,0x00,
        // start
        // label : 0
        0x00,0x00,
        0x05,0x00,0x00,0x00,
        0xFF,0x01,0x05,0x00,0x03,0x01,0x00,0x00,0x00,
        0xFF,0x01,0x05,0x00,0x03,0x02,0x00,0x00,0x00,
        0x00,0x02,0x02,0x03,0x00,
        0x00,0x69,0x02,0x00,0x01,
        0x00,0x4d,0x02,0x00,0x00,
        // end
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
    ];
    super::super::super::super::reader::Reader::read_constant_pool(constant_pool.as_ptr(), constant_pool.len());
    //println!("{:?}",constant_and_pool::CONSTANT_POOL.read().unwrap());
    let mut reader = super::super::super::super::reader::Reader::new(bytes.as_ptr());
    let func = reader.read_func();
    println!("{}",func);
    let stack= super::super::super::super::vm::executer::stack::Stack::new(Box::new(func));
    use super::super::super::super::vm::*;
    let h = new_thread(stack);
    let (s,r) = get_sender_receiver(h);
    println!("===== testing Add =====");
    let (v,_) = get_join_handle(h).await;
    //assert_eq!(v[0],super::super::Value(super::super::PrimeValue::Num(-3.1415926),super::super::super::super::bin_format::Type::Mono(0x04)))
    assert_eq!(v[0],super::super::Value(super::super::PrimeValue::Int(2),super::super::super::super::bin_format::Type::Mono(0x03)))
}