#[async_std::test]
async fn TestFuncCall() {
    let constant_pool = [
        0x01,
        0x11,
        0x01,0x00,0x00,0x00,
        0x01,0x00,0x00,0x00,
    
        0x08, 0x00, 0x00, 0x00, 
        0x72, 0x00,  0x65, 0x00,  0x74, 0x00,  0x5F, 0x00,  0x6E, 0x00,  0x75, 0x00,  0x6C, 0x00,  0x6C, 0x00, 
        0x01,0x00,0x00,0x00,
        0x00,
        0x00,
        0x01,
        0x00,0x00,0x00,0x00,
        0x01,0x00,0x00,0x00,
        0x00,
        0x01,0x00,
        // start
        // label : 0
        0x00,0x00,
        0x03,0x00,0x00,0x00,
        0x00,0x02,0x00,0x01,0x00,
        0x00,0x4d,0x00,0x00,0x00,
        0x00,0x25,0x00,0x00,0x00,
        // end
    
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
    ];
    
    let bytes = [
        0x02, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x65, 0x00,
        0x00,0x00,0x00,0x00,
        0x00,
        0x00,
        0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x01,0x00,
    // start
    // label : 0
        0x00,0x00,
        0x03,0x00,0x00,0x00,
    
        0x00,0x45,0x00,0x00,0x00,
        0x00,0x4d,0x00,0x00,0x00,
        0x00,0x22,0x00,0x00,0x00,
    // end
        0x01,0x00,0x00,0x00,
        0x11,0x01,0x00,0x00,0x00,
    
        0x00,0x00,0x00,0x00,
    ];
    super::super::super::super::reader::Reader::read_constant_pool(constant_pool.as_ptr(), constant_pool.len());
    //println!("{:?}",constant_and_pool::CONSTANT_POOL.read().unwrap());
    let mut reader = super::super::super::super::reader::Reader::new(bytes.as_ptr());
    let func = reader.read_func();
    println!("{}",func);
    let stack= super::super::super::super::vm::executer::stack::Stack::new(Box::new(func));
    use super::super::super::super::vm::*;
    let h = new_thread(stack);
    let (s,r) = get_sender_receiver(h);
    println!("===== testing FuncCall =====");
    let (v,_) = get_join_handle(h).await;
    assert_eq!(v[0],super::super::Value(super::super::PrimeValue::Null,super::super::super::super::bin_format::Type::Kind));
}

#[async_std::test]
async fn TestThreadYieldResume() {
    let constant_pool = [
        0x01,
        0x11,
        0x01,0x00,0x00,0x00,
        0x01,0x00,0x00,0x00,
    
        0x08, 0x00, 0x00, 0x00, 
        0x72, 0x00,  0x65, 0x00,  0x74, 0x00,  0x5F, 0x00,  0x6E, 0x00,  0x75, 0x00,  0x6C, 0x00,  0x6C, 0x00, 
        0x01,0x00,0x00,0x00,
        0x00,
        0x00,
        0x01,
        0x00,0x00,0x00,0x00,
        0x01,0x00,0x00,0x00,
        0x00,
        0x01,0x00,
        // start
        // label : 0
        0x00,0x00,
        0x07,0x00,0x00,0x00,
    
        0x00,0x02,0x00,0x01,0x00,
        0x00,0x4d,0x00,0x00,0x00,
    
        0x00,0x29,0x00,0x00,0x00,
    
        0x00,0x02,0x01,0x02,0x00,
        0x00,0x4d,0x00,0x00,0x00,
        0x00,0x4d,0x01,0x00,0x00,
    
        0x00,0x25,0x00,0x00,0x00,
        // end
    
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
    ];
    let bytes = [
    0x02, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x65, 0x00,
    0x00,0x00,0x00,0x00,
    0x00,
    0x00,
    0x00,
    0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,
    0x01,0x00,
// start
// label : 0
    0x00,0x00,
    0x07,0x00,0x00,0x00,

    0x00,0x45,0x00,0x00,0x00,
    0x00,0x4e,0x00,0x00,0x00,
    0x00,0x4f,0x01,0x00,0x00,
    0x00,0x30,0x01,0x00,0x00,
    0x00,0x50,0x01,0x00,0x00,

    0x00,0x4d,0x02,0x00,0x00,
    0x00,0x4d,0x03,0x00,0x00,
// end
    0x01,0x00,0x00,0x00,
    0x11,0x01,0x00,0x00,0x00,

    0x00,0x00,0x00,0x00,
];
    super::super::super::super::reader::Reader::read_constant_pool(constant_pool.as_ptr(), constant_pool.len());
    //println!("{:?}",constant_and_pool::CONSTANT_POOL.read().unwrap());
    let mut reader = super::super::super::super::reader::Reader::new(bytes.as_ptr());
    let func = reader.read_func();
    println!("{}",func);
    let stack= super::super::super::super::vm::executer::stack::Stack::new(Box::new(func));
    use super::super::super::super::vm::*;
    let h = new_thread(stack);
    let (s,r) = get_sender_receiver(h);
    println!("===== testing FuncCall =====");
    let (v,_) = get_join_handle(h).await;
    assert_eq!(v[0],super::super::Value(super::super::PrimeValue::Null,super::super::super::super::bin_format::Type::Kind));
}

#[async_std::test]
async fn TestJMP(){
    let constant_pool = [
        0x01,
        0x04,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x4a,0xd8,0x12,0x4d,0xfb,0x21,0x09,0x40
    ];
    let bytes = [
        0x03, 0x00, 0x00, 0x00, 
        0x6a, 0x00, 0x6d,0x00,0x70,0x00,
        0x00,0x00,0x00,0x00,
        0x00,
        0x00,
        0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x04,0x00,
    // start
    // label : 0
        0x00,0x00,
        0x01,0x00,0x00,0x00,
        0x00,0x20,0x02,0x00,0x00,
    // label : 1
        0x01,0x00,
        0x02,0x00,0x00,0x00,
        0x00,0x02,0x00,0x01,0x00,
        0x00,0x20,0x03,0x00,0x00,
    // label : 2
        0x02,0x00,
        0x01,0x00,0x00,0x00,
        0x00,0x20,0x01,0x00,0x00,
    // label : 3
        0x03,0x00,
        0x02,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,
        0x00,0x4d,0x00,0x00,0x00,
    // end
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
    ];
    super::super::super::super::reader::Reader::read_constant_pool(constant_pool.as_ptr(), constant_pool.len());
    let mut reader = super::super::super::super::reader::Reader::new(bytes.as_ptr());
    let func = reader.read_func();
    println!("{}",func);

    super::super::super::super::reader::Reader::read_constant_pool(constant_pool.as_ptr(), constant_pool.len());
    //println!("{:?}",constant_and_pool::CONSTANT_POOL.read().unwrap());
    let mut reader = super::super::super::super::reader::Reader::new(bytes.as_ptr());
    let func = reader.read_func();
    println!("{}",func);
    let stack= super::super::super::super::vm::executer::stack::Stack::new(Box::new(func));
    use super::super::super::super::vm::*;
    let h = new_thread(stack);
    let (s,r) = get_sender_receiver(h);
    println!("===== testing FuncCall =====");
    let (v,_) = get_join_handle(h).await;
    assert_eq!(v[0],super::super::Value(super::super::PrimeValue::Null,super::super::super::super::bin_format::Type::Kind));
}

#[async_std::test]
async fn TestJPE(){
    let constant_pool = [
        0x01,
        0x04,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x4a,0xd8,0x12,0x4d,0xfb,0x21,0x09,0x40
    ];
    let bytes = [
        0x03, 0x00, 0x00, 0x00, 
        0x6a, 0x00, 0x6d,0x00,0x70,0x00,
        0x00,0x00,0x00,0x00,
        0x00,
        0x00,
        0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x04,0x00,
    // start
    // label : 0
        0x00,0x00,
        0x03,0x00,0x00,0x00,
        0x00,0x03,0xFF,0x00,0x00,
        0x00,0x26,0x00,0x01,0x00,
        0x00,0x27,0x00,0x02,0x00,
    // label : 1
        0x01,0x00,
        0x02,0x00,0x00,0x00,
        0xFF,0x01,0x05,0x00,0x04,0x01,0x00,0x00,0x00,
        0x00,0x20,0x03,0x00,0x00,
    // label : 2
        0x02,0x00,
        0x02,0x00,0x00,0x00,
        0x00,0x02,0x01,0x02,0x00,
        0x00,0x20,0x03,0x00,0x00,
    // label : 3
        0x03,0x00,
        0x01,0x00,0x00,0x00,
        0x00,0x4d,0x01,0x00,0x00,
    // end
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
    ];
    super::super::super::super::reader::Reader::read_constant_pool(constant_pool.as_ptr(), constant_pool.len());
    //println!("{:?}",constant_and_pool::CONSTANT_POOL.read().unwrap());
    let mut reader = super::super::super::super::reader::Reader::new(bytes.as_ptr());
    let func = reader.read_func();
    println!("{}",func);
    let stack= super::super::super::super::vm::executer::stack::Stack::new(Box::new(func));
    use super::super::super::super::vm::*;
    let h = new_thread(stack);
    let (s,r) = get_sender_receiver(h);
    println!("===== testing FuncCall =====");
    let (v,_) = get_join_handle(h).await;
    assert_eq!(v[0].0,super::super::PrimeValue::Num(3.1415926));
}
#[async_std::test]
async fn TestJPN(){
    let constant_pool = [
        0x01,
        0x04,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x4a,0xd8,0x12,0x4d,0xfb,0x21,0x09,0x40
    ];
    let bytes = [
        0x03, 0x00, 0x00, 0x00, 
        0x6a, 0x00, 0x6d,0x00,0x70,0x00,
        0x00,0x00,0x00,0x00,
        0x00,
        0x00,
        0x00,
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
        0x04,0x00,
    // start
    // label : 0
        0x00,0x00,
        0x03,0x00,0x00,0x00,
        0x00,0x03,0x00,0x00,0x00,
        0x00,0x26,0x00,0x02,0x00,
        0x00,0x27,0x00,0x01,0x00,
    // label : 1
        0x01,0x00,
        0x02,0x00,0x00,0x00,
        0xFF,0x01,0x05,0x00,0x04,0x01,0x00,0x00,0x00,
        0x00,0x20,0x03,0x00,0x00,
    // label : 2
        0x02,0x00,
        0x02,0x00,0x00,0x00,
        0x00,0x02,0x01,0x02,0x00,
        0x00,0x20,0x03,0x00,0x00,
    // label : 3
        0x03,0x00,
        0x01,0x00,0x00,0x00,
        0x00,0x4d,0x01,0x00,0x00,
    // end
        0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,
    ];
    super::super::super::super::reader::Reader::read_constant_pool(constant_pool.as_ptr(), constant_pool.len());
    //println!("{:?}",constant_and_pool::CONSTANT_POOL.read().unwrap());
    let mut reader = super::super::super::super::reader::Reader::new(bytes.as_ptr());
    let func = reader.read_func();
    println!("{}",func);
    let stack= super::super::super::super::vm::executer::stack::Stack::new(Box::new(func));
    use super::super::super::super::vm::*;
    let h = new_thread(stack);
    let (s,r) = get_sender_receiver(h);
    println!("===== testing FuncCall =====");
    let (v,_) = get_join_handle(h).await;
    assert_eq!(v[0].0,super::super::PrimeValue::Num(3.1415926));
}